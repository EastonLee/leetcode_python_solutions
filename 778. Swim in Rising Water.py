import unittest
from pprint import pprint
import re
import cProfile
import heapq
import bisect
import collections
import itertools
import numpy as np

'''

'''
# Definition for a binary tree node.


class TreeNode:
    def __init__(self, val, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

    def __repr__(self):
        return 'TreeNode({})'.format(self.val)


def tree_deserialize(string):
    """
    author: @StefanPochmann
    """
    if string == '{}':
        return None
    nodes = [None if val == 'null' else TreeNode(int(val))
             for val in string.strip('[]{}').split(',')]
    kids = nodes[::-1]
    root = kids.pop()
    for node in nodes:
        if node:
            if kids:
                node.left = kids.pop()
            if kids:
                node.right = kids.pop()
    return root


def tree_height(root):
    """
    author: @StefanPochmann
    """
    return 1 + max(tree_height(root.left), tree_height(root.right)) if root else -1


def tree_draw(root):
    def jumpto(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()
    def draw(node, x, y, dx):
        if node:
            t.goto(x, y)
            jumpto(x, y - 20)
            t.write(node.val, align='center', font=('Arial', 12, 'normal'))
            draw(node.left, x - dx, y - 60, dx / 2)
            jumpto(x, y - 20)
            draw(node.right, x + dx, y - 60, dx / 2)
    import turtle
    t = turtle.Turtle()
    t.speed(0)
    turtle.delay(0)
    h = tree_height(root)
    jumpto(0, 30 * h)
    draw(root, 0, 30 * h, 40 * h)
    t.hideturtle()
    turtle.mainloop()


class Solution(object):
    
    # ugly, never use it again
    # worst case: O(n^4)
    def swimInWater(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        N = len(grid)
        states = [[None] * N for i in range(N)]
        states[0][0] = 's' # start
        states[-1][-1] = 'e' # end
        d = {}
        passable = []
        for i, r in enumerate(grid):
            for j, c in enumerate(r):
                d[c] = [i,j]
        for g in range(N*N):
            if g == N*N - 1: 
                return N*N - 1
            if d[g][0] == d[g][1] and d[g][0] in [0, N-1]:
                passable.append(g)
            if states[d[g][0]][d[g][1]] not in ['s', 'e']:
                passable.append(g)
                states[d[g][0]][d[g][1]] = 'p'
            pre_len = -1
            while len(passable) != pre_len:
                pre_len = len(passable)
                for p in passable[::-1]:
                    i,j = d[p]
                    adj = [[i+a, j+b] for a,b in [[-1,0],[1,0],[0,-1],[0,1]] if 0<=i+a<=N-1 and 0<=j+b<=N-1]
                    for a,b in adj:
                        if [states[a][b], states[i][j]] in [['s', 'e'], ['e', 's']]:
                            if a == b and a in [0, N-1]:
                                return max(g, grid[-1][-1], grid[0][0])
                            return g
                        if states[i][j] in [None, 'p']:
                            if states[a][b] in ['s', 'e']:
                                if a == b and a in [0, N-1] and grid[a][b] > g:
                                    continue
                                states[i][j] = states[a][b]
                                passable.remove(p)
        pass

    # faster than mine, only consider the lowest neigbour
    # O(n^2log(n))
    # https://leetcode.com/problems/swim-in-rising-water/discuss/113770/Easy-and-Concise-Solution-using-PriorityQueue-PythonC++
    def swimInWater1(self, grid):
        N, pq, seen, res = len(grid), [(grid[0][0], 0, 0)], set([(0, 0)]), 0
        while True:
            T, x, y = heapq.heappop(pq)
            res = max(res, T)
            if x == y == N - 1:
                return res
            for i, j in [(x + 1, y), (x, y + 1), (x - 1, y), (x, y - 1)]:
                if 0 <= i < N and 0 <= j < N and (i, j) not in seen:
                    seen.add((i, j))
                    heapq.heappush(pq, (grid[i][j], i, j))

class Test(unittest.TestCase):

    def test(self):
        case = [[2131,2236,1025,2385,857,1991,1771,430,332,697,1560,434,2126,1405,1340,2212,2112,1683,1953,338,1609,180,1214,1478,1767,1171,1122,1774,1853,888,2374,2346,2165,612,518,2063,2249,791,539,737,1990,1790,34,2186,2356,1096,2103,1837,1665],[682,415,170,1616,1494,1208,321,627,2169,2111,866,1245,1069,1655,976,2052,485,1974,1304,535,177,2306,392,2278,784,1312,1610,1679,1915,1107,1262,2398,1053,144,342,613,1444,649,2381,2274,1052,937,294,2150,1393,648,1033,579,532],[1858,1928,2251,352,1821,1370,260,2102,861,1526,1227,2125,1570,1897,337,1411,1742,939,767,1868,494,1960,1628,1094,1017,1741,1029,198,1159,1477,2373,1922,892,1950,453,217,880,1757,578,913,2035,1527,81,1550,1936,432,1697,1954,1600],[476,2273,761,2100,908,131,1154,1994,1026,623,2223,212,654,620,182,66,927,2018,2195,950,674,1368,768,2350,2083,1450,1627,647,1554,1601,676,1163,1512,1569,2003,3,1617,479,2127,264,1978,842,111,156,1958,1951,22,2323,1339],[1658,421,2221,531,1633,2156,1258,1987,1517,657,1392,438,874,561,472,1674,1303,1710,1540,29,547,1887,219,1753,500,1826,1755,1751,1051,1048,1522,1089,1732,1706,1325,77,1792,2079,2383,793,581,2000,1972,1036,2215,554,1047,1247,2240],[2004,335,143,595,928,190,148,257,2101,1759,770,464,393,742,92,1136,2239,862,1238,1896,1168,154,1067,2376,2157,890,1567,169,155,1384,47,883,1993,1937,1420,300,2309,1060,1898,685,489,1404,1242,2192,1217,253,548,1589,1343],[2308,2366,1296,1143,1985,413,490,2213,1749,2109,663,2392,270,749,585,1463,1944,1606,1963,1834,1422,884,2053,1295,1367,2232,2301,1430,1871,677,1045,916,419,1419,2179,305,2099,989,997,1961,232,271,2378,1585,1955,306,1428,72,129],[948,1564,41,151,1979,2365,1631,859,1021,1733,1464,984,2001,2139,221,832,1744,2181,1852,2245,508,2074,1166,589,611,753,281,2128,1081,841,1382,1800,717,95,1449,2201,6,21,1273,1403,1172,1460,1165,304,1138,1177,457,614,278],[160,344,564,359,1298,870,466,1976,1793,1109,1626,1566,1483,1187,1364,1727,1900,2108,1636,1666,501,1914,2178,809,2043,1981,1315,1448,588,376,628,1709,497,450,1065,1746,16,692,530,331,1105,2039,454,1241,1297,829,915,1867,1229],[2098,405,1300,562,1009,1941,1491,1893,1669,2209,699,216,922,868,2105,295,168,783,1684,147,1066,122,83,84,346,43,1546,1127,1301,2194,1363,2096,123,69,1426,1642,1388,2290,433,512,2113,1640,1013,460,1306,2153,403,2267,1470],[1934,718,280,1314,2284,238,935,635,739,669,126,1864,172,672,1518,1359,1244,2021,1782,1150,1031,2294,1613,1417,380,740,2041,777,1788,1784,1008,632,2207,1501,796,1829,263,1121,1791,1920,1116,498,1624,543,2034,8,2027,1396,617],[983,995,2084,1373,2149,2196,269,2384,1596,1366,1841,2220,2040,1030,285,1015,603,1872,1735,2069,477,2238,1673,2176,37,459,731,1090,1736,356,1034,533,204,1152,349,258,1851,887,1205,2091,191,735,53,1618,1310,1848,1926,1718,384],[1170,877,2271,1531,1151,114,1481,2241,103,2228,2028,1075,2285,193,441,166,864,2121,1040,1492,1117,2009,10,2388,2133,367,88,1504,1668,283,885,652,341,1248,1084,1965,80,2371,582,1022,228,2362,1440,2336,14,1347,240,1497,947],[2219,1294,2397,1317,357,1471,336,2316,1608,483,782,552,1728,163,980,2023,308,1594,2310,2110,1175,86,1054,1996,379,2122,510,224,704,1571,615,33,2262,1921,416,1106,1289,377,2184,577,268,1510,1839,1263,2145,545,1182,1770,361],[752,2158,279,1028,2214,93,776,2049,1355,526,1335,2078,1875,1354,1756,1102,402,2337,2134,1320,1179,1946,355,1056,1892,101,1074,307,1281,209,48,1992,443,642,272,1003,1101,790,834,565,1623,1814,1390,202,926,966,1140,2026,1722],[109,2123,133,1918,2372,259,1341,2333,2082,175,50,62,1545,1465,1719,128,38,2338,1899,2289,404,896,1006,1664,1243,2248,2261,1580,372,455,2318,2104,358,1055,1160,544,2300,826,400,67,1561,373,2224,458,118,2235,40,370,1111],[1514,560,138,0,1224,435,1479,1809,568,396,2272,630,2305,1137,1186,2299,2243,2162,513,1050,366,710,1156,1023,1803,1982,2389,1414,1061,1597,397,275,159,1493,1743,429,1773,1037,1328,395,968,374,1556,1983,462,2304,1063,1423,1551],[486,973,386,2335,229,70,1747,838,1447,2348,192,549,2017,701,1798,1763,637,2066,1264,394,786,2394,785,1132,381,2118,943,254,1662,1745,1699,1681,1657,1399,831,805,1778,1098,763,914,906,808,2094,1338,860,869,231,1708,772],[965,2120,1752,1466,1488,350,2175,2307,1676,769,354,2321,1222,571,2359,30,1820,574,2024,1845,1521,2167,536,378,1416,1984,353,604,524,2160,36,447,2057,1781,1397,528,1461,2033,2170,1115,1474,570,1438,1357,2364,2092,412,2143,2068],[73,1293,1588,1565,1178,407,2293,546,157,1253,1039,1625,2218,1827,756,333,2370,1703,902,2191,385,1925,1818,1016,924,1508,1519,431,991,426,2266,1236,11,248,161,621,195,436,1239,879,465,1574,689,2059,949,2269,153,820,2089],[1797,1577,1712,567,590,719,1062,1785,1780,1130,1796,598,1643,601,2189,1817,882,1199,1971,1278,1099,1409,1321,853,1005,1240,1677,24,287,1587,1292,428,2393,340,534,2281,13,262,509,962,1020,504,2070,2211,1155,87,1250,774,227],[1318,1714,2216,1916,1888,688,2136,818,1082,999,2328,505,119,675,656,1913,1553,1720,2380,573,1894,959,634,226,1869,1675,446,599,502,1076,1068,1581,117,493,1995,765,1468,2090,445,1862,1458,1097,1619,941,326,1153,1731,215,1001],[1688,863,996,1602,819,322,46,389,200,42,1144,137,1604,1024,803,733,134,1220,246,5,771,1542,801,1395,184,931,312,942,671,1603,1576,2264,1509,1256,1878,1824,2313,1266,2334,597,936,1534,1729,237,124,1563,748,1475,2344],[951,2345,732,121,213,624,1611,1787,136,368,2138,2056,1842,1196,1350,290,2185,1895,2093,1762,1694,1883,2379,140,75,1947,1046,2172,1500,461,360,1276,1007,889,1093,1480,1433,1142,1272,643,2208,218,106,1634,2061,1854,2351,463,664],[2375,1442,1110,2087,1216,1968,2312,953,1502,1682,98,1582,2276,1973,1490,1356,629,187,32,1516,893,1425,660,390,339,1344,1249,1717,316,762,1943,1849,940,1794,205,343,1362,1126,1912,85,1386,1307,1032,1555,2080,1599,188,388,538],[1322,1197,1879,1935,113,371,1884,2067,1980,1472,1141,323,1086,2288,2222,2031,780,408,1429,1764,104,1650,206,609,2360,1348,986,1536,722,1765,165,100,1010,1638,417,1402,1882,23,636,1859,542,655,1311,602,964,1410,804,1365,329],[550,1850,1164,1847,2231,1064,622,667,736,933,256,1539,1832,2051,2339,2046,1443,797,273,960,2283,1548,1188,189,1329,1271,90,1779,2045,1734,2247,1316,1161,747,495,9,969,1533,715,858,1838,878,2117,1807,514,496,825,2042,1012],[596,1532,1389,1823,1000,743,1654,437,1233,250,52,406,683,961,910,1704,2330,520,2020,1071,49,2390,2387,904,1299,702,1004,1394,475,865,1041,1860,695,1678,267,1014,1830,754,1885,1145,18,970,871,251,2164,220,491,1661,773],[1815,319,1372,89,1831,836,291,876,71,2342,994,1911,230,2115,2358,2354,811,2119,1711,1434,1952,242,1079,1206,2015,310,2286,898,102,2259,1058,127,351,1226,1812,1002,61,559,580,1822,1124,1535,1418,511,488,1816,1861,1467,110],[1371,569,234,1917,1189,1740,25,484,1811,923,1313,2030,1865,1656,2343,1702,1088,755,1378,987,759,723,365,1857,289,1398,26,690,1660,1725,952,982,2029,600,1721,2180,1707,210,2044,398,703,2065,411,1195,2088,1801,849,2202,2227],[423,662,946,778,555,1412,1639,899,1287,1537,1237,1761,945,201,1158,2257,2190,1286,2367,1889,199,557,1592,1910,2168,891,1966,854,1505,1169,1342,186,2036,1670,1986,1572,1999,802,1,2210,988,2258,1772,2226,1445,2007,1134,2062,2340],[558,1964,456,1825,2391,1653,1284,1723,726,1358,1087,1451,1591,1529,644,551,691,2303,348,2298,1408,1270,806,909,1435,1622,1843,1190,1549,12,728,222,7,2055,517,519,1671,824,1400,713,1120,105,1252,1413,1620,1593,54,1375,975],[1275,540,1647,139,901,297,553,1686,1455,1323,1282,977,1645,1489,1692,1648,241,1777,328,265,2086,474,1786,1988,1930,823,1805,1387,1863,1881,2025,1436,1459,2246,1949,487,2347,972,593,2252,2188,2159,58,1769,716,757,2327,2319,282],[1528,954,1967,2071,881,1381,2282,1715,107,1998,2008,164,1615,383,714,1374,706,480,848,2204,1802,1042,575,2097,2010,2075,482,64,594,1919,1184,1687,302,1716,1713,1543,2225,903,1125,1652,2022,1332,1856,725,840,82,873,1383,2363],[2200,1391,197,1385,334,324,985,425,875,214,1810,1268,2400,1680,2152,1557,673,108,727,730,2154,1337,1511,1726,681,1503,2297,2006,956,1376,471,2292,639,1698,1738,1866,1904,1035,1552,894,1962,506,1432,2132,56,1104,1180,2081,1846],[125,135,1191,789,317,1261,1139,171,1439,1877,1969,181,1487,59,1573,1441,591,2250,764,1080,401,4,20,239,2326,1840,132,1730,1092,563,1360,1018,345,236,2265,1255,709,729,414,1361,146,912,1644,2148,705,1890,1200,1183,978],[1049,2206,303,1235,410,2287,152,1257,2382,387,1185,618,1783,313,2237,2014,1799,955,2171,469,787,1931,1228,800,721,196,993,252,2263,1908,1637,266,2182,537,1194,998,2254,651,1454,658,1583,659,638,55,96,2234,1059,515,606],[541,2233,792,1346,1768,795,1905,2116,2296,15,2064,1891,320,918,2187,1437,1484,1019,311,944,1525,2268,298,60,31,1193,467,828,855,1632,27,851,1221,2137,843,1689,1685,1945,810,286,686,1232,971,2242,958,1956,1975,1558,28],[309,276,1407,2331,1693,1690,2183,1336,1057,2341,679,1724,766,1218,2077,2324,1308,813,807,2,1641,207,640,1207,1331,243,1078,1351,665,65,1970,2141,422,99,653,1274,185,680,194,1181,1766,2314,1612,2198,452,666,1595,179,1431],[158,633,1231,145,698,1113,835,905,886,150,1415,1696,1173,576,1939,1201,255,2368,2270,934,700,687,173,115,2106,1283,2147,921,1844,974,1906,1880,2197,1873,1345,2085,1254,584,1118,712,2396,694,981,211,696,1559,1579,2005,2377],[1473,852,2076,1119,2325,420,1114,327,822,176,1776,1027,1302,2013,330,2054,631,744,845,1128,516,1072,1469,1833,2357,867,1260,449,816,1524,2177,2353,1209,645,1038,1085,369,245,503,1219,2032,1157,2199,473,1291,678,2012,798,1174],[2151,468,2369,2311,1748,2073,1886,720,1737,45,1319,492,399,2352,1401,1870,856,2072,1977,1614,925,1043,1176,1575,1933,2229,2322,235,2173,2260,2016,587,963,470,2277,2140,527,1288,427,1162,1379,1279,920,1211,1568,17,2130,2302,1327],[375,1103,1192,522,2230,167,1754,1646,94,1695,1259,1828,2253,788,821,1377,44,2193,2037,1011,1874,1285,2114,1476,794,1523,2038,142,1855,745,2011,2361,2048,1940,1813,1835,141,846,1230,1269,1427,2291,1070,1649,233,650,911,1108,130],[608,566,1997,1204,760,1077,1112,1876,1701,2255,1213,2060,1530,1507,607,529,2129,1584,799,1131,178,2095,872,592,839,1547,481,2295,418,833,293,249,2050,1775,932,734,1212,1457,850,1923,1789,605,362,325,292,2399,1100,1541,2205],[1907,2244,1277,817,646,318,1739,670,1246,1280,1406,409,1234,78,1202,1486,1795,707,208,1044,1598,1203,2315,775,1578,2163,781,746,68,424,1083,900,363,1421,1562,847,478,1758,523,2275,19,1901,1369,812,1750,1095,1506,929,2279],[938,837,525,751,1482,917,844,1499,625,116,444,1251,1760,2047,1380,661,724,1462,907,1804,1495,1948,112,2155,619,1909,827,301,1663,1167,499,364,120,507,1586,738,1629,2146,2329,1135,2002,992,967,1123,63,2124,1485,1672,1334],[1691,448,583,1456,1819,1424,1806,1446,830,79,1149,1902,440,2386,1453,2107,57,2142,76,1667,930,814,616,2217,1630,2332,442,74,1452,668,382,2256,296,610,1705,183,1942,1309,2019,741,288,2144,284,1659,1929,957,1352,1927,1515],[2203,750,711,2349,2174,149,162,684,556,277,2317,1225,708,897,626,261,1326,391,1353,244,314,1836,1265,1498,1290,223,2395,979,1349,274,1148,1324,521,1513,1267,1215,1938,347,1333,1198,641,1605,1330,203,1520,439,815,586,1073],[1146,1621,35,2135,91,1538,1305,1932,895,1147,1808,572,1903,1544,1091,1635,174,2280,1496,1129,693,39,2320,919,247,299,1924,2166,1133,2161,1223,97,1700,2058,225,758,1651,1210,315,779,990,1989,51,1607,1959,1590,2355,1957,451]]
        print Solution().swimInWater(case) 
        assert Solution().swimInWater(case) == 2131 
        case = [[11,15,3,2],[6,4,0,13],[5,8,9,10],[1,14,12,7]]
        assert Solution().swimInWater(case) == 11
        case = [[0,2],[1,3]]
        assert Solution().swimInWater(case) == 3
        case = [[3,2], [0,1]]
        assert Solution().swimInWater(case) == 3
        case = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]
        assert Solution().swimInWater(case) == 16
        case = [[10,12,4,6],[9,11,3,5],[1,7,13,8],[2,0,15,14]]
        assert Solution().swimInWater(case) == 14

        #cProfile.runctx('Solution().calculate(case)', globals(), locals(), sort='cumtime')

    def est_tree_draw(self):
        tree_draw(tree_deserialize('[1,2,3,4,5,6,7]'))

if __name__ == '__main__':
    unittest.main(exit=False)

